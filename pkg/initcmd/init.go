package initcmd

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"strings"
)

const filePermission os.FileMode = 0o644

func Init(ctx context.Context) error {
	if err := initRegistryYAML(); err != nil {
		return err
	}
	if err := initAquaYAML(); err != nil {
		return err
	}
	if err := initAquaDevYAML(ctx); err != nil {
		return err
	}
	return nil
}

func initAquaYAML() error {
	if _, err := os.Stat("aqua.yaml"); err == nil {
		return nil
	}
	fmt.Fprintln(os.Stderr, "Creating aqua.yaml")
	if err := os.WriteFile("aqua.yaml", []byte(`---
# aqua - Declarative CLI Version Manager
# https://aquaproj.github.io/
registries:
  - name: standard
    type: local
    path: registry.yaml
packages:
`), filePermission); err != nil {
		return fmt.Errorf("create aqua.yaml: %w", err)
	}
	return nil
}

func initAquaDevYAML(ctx context.Context) error {
	if _, err := os.Stat("aqua-dev.yaml"); err == nil {
		return nil
	}
	if err := command(ctx, "aqua", "init", "aqua-dev.yaml"); err != nil {
		return err
	}
	if err := command(ctx, "aqua", "-c", "aqua-dev.yaml", "g", "-i", "cli/cli"); err != nil {
		return err
	}
	return nil
}

func command(ctx context.Context, cmdName string, args ...string) error {
	s := cmdName + " " + strings.Join(args, " ")
	fmt.Fprintln(os.Stderr, "+ "+s)
	cmd := exec.CommandContext(ctx, cmdName, args...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("execute a command: %s: %w", s, err)
	}
	return nil
}

func initRegistryYAML() error {
	if _, err := os.Stat("registry.yaml"); err == nil {
		return nil
	}
	fmt.Fprintln(os.Stderr, "Creating registry.yaml")
	if err := os.WriteFile("registry.yaml", []byte(`---
# Don't edit registry.yaml manually.
# registry.yaml is generated by command "go run ./cmd/generate-registry".
packages:
`), filePermission); err != nil {
		return fmt.Errorf("create registry.yaml: %w", err)
	}
	return nil
}
